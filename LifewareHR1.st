Object subclass: #Car1	instanceVariableNames: 'price rented rentedPeriod carBrand description carModel picUrl'	classVariableNames: ''	package: 'LifewareHR1'!!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/31/2023 22:06'!carBrand: aCarBrand	carBrand := aCarBrand! !!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/20/2023 12:51'!setRented: aBoolean	rented := aBoolean! !!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/20/2023 12:51'!setRentedPeriod: aPeriod	rentedPeriod add: aPeriod! !!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/31/2023 22:07'!carModel: aCarModel	carModel := aCarModel! !!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/31/2023 22:08'!picUrl: aPicUrl	picUrl := aPicUrl! !!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/23/2023 20:29'!initialize	self setRented: false.	description := 'A four wheeled vehicle'.	rentedPeriod := OrderedCollection new! !!Car1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/31/2023 22:08'!price: aPrice	price := aPrice! !!Car1 methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/31/2023 13:00'!descriptionCarBrand<magritteDescription>^ MAStringDescription newaccessor: #carBrand;beRequired;yourself! !!Car1 methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/31/2023 13:00'!descriptionDescription<magritteDescription>^ MAStringDescription newaccessor: #description;yourself! !!Car1 methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/31/2023 21:06'!descriptionPicUrl<magritteDescription>^ MAStringDescription newaccessor: #picUrl;beRequired;yourself! !!Car1 methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/31/2023 12:57'!descriptionPrice<magritteDescription>^ MANumberDescription newaccessor: #price;beRequired;yourself! !!Car1 methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/31/2023 13:02'!descriptionCarModel<magritteDescription>^ MAStringDescription newaccessor: #carModel;beRequired;yourself! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/23/2023 20:32'!picUrl	^ picUrl! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/20/2023 12:51'!price	^ price! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/23/2023 19:34'!carBrand	^ carBrand! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/20/2023 12:51'!rented	^ rented! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/23/2023 20:30'!carModel	^ carModel! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/23/2023 20:30'!description	^ description! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 4/10/2023 12:22'!description: aDescription	description := aDescription! !!Car1 methodsFor: 'accessor' stamp: 'BrunoLazo 3/20/2023 13:56'!rentedPeriod	^ rentedPeriod! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Car1 class	instanceVariableNames: ''!!Car1 class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/23/2023 19:42'!tesla	^ self price: 400 carBrand: 'Tesla'! !!Car1 class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/23/2023 19:40'!panda	^ self price: 50 carBrand: 'Panda'! !!Car1 class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/31/2023 22:08'!price: aPrice carBrand: aCarBrand	^ self new price: aPrice; carBrand: aCarBrand; yourself! !!Car1 class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/23/2023 19:40'!golf	^ self price: 100 carBrand: 'Golf'! !!Car1 class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/31/2023 22:08'!price: aPrice carBrand: aCarBrand carModel: aCarModel picUrl:aPicUrl	^ self new price: aPrice; carBrand: aCarBrand; carModel: aCarModel; picUrl:aPicUrl; yourself! !Object subclass: #CarRental1	instanceVariableNames: 'cars administrators clients'	classVariableNames: ''	package: 'LifewareHR1'!!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/10/2023 19:30'!price: aCar timeSpan: aTimeSpanaCar carBrand = 'Tesla'	ifTrue: [ 		| intersectionPeriodGolf aGolf |		aGolf := self totalCars detect: [ :each | each carBrand = 'Golf' ].		intersectionPeriodGolf := self intersectionTimeOf: aGolf during: aTimeSpan. 		intersectionPeriodGolf ifNotEmpty: [ ^ self priceFor: aCar days: aTimeSpan duration asDays discount: 10 ].	].	^ self priceFor: aCar days: aTimeSpan duration asDays discount: 0! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/11/2023 12:21'!priceFor: aCar days: anInteger	aCar carBrand = 'Golf'	ifTrue: [ 		anInteger < 4		ifFalse: [ ^ (aCar price * 3 + (aCar price * 0.9 * (anInteger - 3))) ] 	].	^ (aCar price * anInteger)! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/10/2023 12:22'!addAdministrator: anAdmin	self administrators add: anAdmin.	self save! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/10/2023 20:12'!rent: aCar days: anIntegeraCar rented	ifFalse: [ aCar setRented: true ].! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 3/30/2023 21:33'!addClient: aClient	self clients add: aClient.	self save! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/11/2023 12:50'!rent: aCar timeSpan: aTimeSpan"returns a timespan collection containing the intersection between the timespan selected by the client and those already stored by the car object, if there is no timespan intersection returns the price for the car renting"| intersectionPeriod |intersectionPeriod := self intersectionTimeOf: aCar during: aTimeSpan.aCar carBrand = 'Tesla'	ifTrue: [ 		intersectionPeriod				ifEmpty: [ 				| intersectionPeriodGolf aGolf |				aGolf := self totalCars detect: [ :each | each carBrand = 'Golf' ].					intersectionPeriodGolf := self intersectionTimeOf: aGolf during: aTimeSpan. 				aCar setRentedPeriod: aTimeSpan.				intersectionPeriodGolf 					ifEmpty: [ ^ self priceFor: aCar days: aTimeSpan duration asDays discount: 0 ] 					ifNotEmpty: [ ^ self priceFor: aCar days: aTimeSpan duration asDays discount: 10 ] 			].	]	ifFalse: [				intersectionPeriod ifEmpty: [ aCar setRentedPeriod: aTimeSpan. ^ self priceFor: aCar days: aTimeSpan duration asDays discount: 0 ]	].^ intersectionPeriod"intersectionPeriod := (aCar rentedPeriod select:[:each | (each intersection: aTimeSpan) isNotNil]).intersectionPeriod ifEmpty: [aCar setRentedPeriod: aTimeSpan. ^true] ifNotEmpty: [ ^false ]""aCar rentedPeriod select:[:each | (each intersection: aTimeSpan) ifNotNil:[ ^false ]].aCar setRentedPeriod: aTimeSpan. ^true""intersectionPeriod:= aCar rentedPeriod collect:[:each | each intersection: queriedPeriod].aCar setRentedPeriod: queriedPeriod.^ intersectionPeriod ""intersectionPeriod:= queriedPeriod includesAny: aCar rentedPeriod.aCar setRentedPeriod: queriedPeriod.^ intersectionPeriod ""aCar setRentedPeriod: queriedPeriod.""(aCar rentedPeriod do:[:each | each intersection: queriedPeriod]) isEmpty	ifTrue: [aCar setRentedPeriod: queriedPeriod. ^true]	ifFalse: [ ^false ]"! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/10/2023 19:02'!intersectionTimeOf: aCar during: aTimeSpan"checks if there is an intersection between the timespan selected by the client and those already stored by the car object"| intersectionPeriod |intersectionPeriod := OrderedCollection new.aCar rentedPeriod do:[ :each | (each intersection: aTimeSpan) 	ifNotNil:[ :intersection | intersectionPeriod add: intersection ] ].^ intersectionPeriod! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/10/2023 19:41'!priceFor: aCar days: anInteger discount: aDiscount	| price |	price := aCar price - aDiscount * anInteger .	^ price! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 4/10/2023 12:22'!addCar: aCar	self totalCars add: aCar.	self save! !!CarRental1 methodsFor: 'action' stamp: 'BrunoLazo 3/31/2023 20:31'!removeCar: aCarcars remove: aCar ifAbsent: [ ].self save.! !!CarRental1 methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/10/2023 17:45'!allBrands"Returns a set containing all the brands"	^ (self totalCars collect: [ :p | p carBrand ]) asSet! !!CarRental1 methodsFor: 'accessing' stamp: 'BrunoLazo 4/10/2023 21:10'!totalCars	^ cars! !!CarRental1 methodsFor: 'accessing' stamp: 'BrunoLazo 4/10/2023 12:35'!administrators	^ administrators! !!CarRental1 methodsFor: 'accessing' stamp: 'BrunoLazo 4/10/2023 16:52'!availableCars	^ cars reject: [ :each | each rented ]	! !!CarRental1 methodsFor: 'accessing' stamp: 'BrunoLazo 4/11/2023 12:55'!rentedCars^ cars select: [ :each | each rented ]! !!CarRental1 methodsFor: 'accessing' stamp: 'BrunoLazo 4/10/2023 17:01'!clients	^ clients! !!CarRental1 methodsFor: 'accessing' stamp: 'BrunoLazo 3/25/2023 10:48'!totalCarsFromBrand: aBrand^ cars select: [ :p | p carBrand = aBrand ]! !!CarRental1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/30/2023 21:40'!initialize	cars := OrderedCollection new.	administrators := OrderedCollection new.	clients := OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CarRental1 class	instanceVariableNames: ''!!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/21/2023 09:02'!isVoyageRoot"Indicates that instances of this class are top level documentsin noSQL databases"^ true! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/21/2023 09:31'!current^ self selectAllifNotEmpty: [ :x | x anyOne ]ifEmpty: [ self new save ]! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 4/3/2023 10:57'!createDemo3| redPanda bluePanda whitePanda redTesla blueTesla redGolf timeSpan1 timeSpan2 timeSpan3 timeSpan4 timeSpan5 timeSpan6 timeSpan7 timeSpan8 |	redPanda := Car1 price: 50 carBrand: 'Panda' carModel: 'Red Panda' picUrl:'https://www.fiat.it/content/dam/fiat/com/my23/panda/colorizer/red/Panda-figurini-colorizer-Passione-Red-desktop-680x430.png'.	bluePanda := Car1 price: 50 carBrand: 'Panda' carModel: 'Blue Panda' picUrl:'https://www.fiat.it/content/dam/fiat/com/my23/panda/colorizer/blue/Panda-figurini-colorizer-Italia-Blue-desktop-680x430.png'.	whitePanda := Car1 price: 50 carBrand: 'Panda' carModel: 'White Panda' picUrl:'https://www.fiat.it/content/dam/fiat/com/my23/panda/colorizer/white/Panda-figurini-colorizer-Gelato-White-desktop-680x430.png'.	redTesla := Car1 price: 400 carBrand: 'Tesla' carModel: 'Red Tesla' picUrl:'https://www.pngall.com/wp-content/uploads/11/Red-Tesla.png'.	blueTesla := Car1 price: 400 carBrand: 'Tesla' carModel: 'Blue Tesla' picUrl:'https://www.pngmart.com/files/21/Tesla-Car-PNG-Picture.png'.	redGolf := Car1 price: 100 carBrand: 'Golf' carModel: 'Red Golf' picUrl:'https://www.pngkit.com/png/full/211-2113073_2013-volkswagen-golf-vw-golf-5-png.png'.		timeSpan1 := Timespan starting: '15 March 2024' duration:(Duration days: 5).	timeSpan2 := Timespan starting: '13 March 2024' duration:(Duration days: 4).	timeSpan3 := Timespan starting: '20 March 2024' duration:(Duration days: 1).	timeSpan4 := Timespan starting: '20 March 2024' duration:(Duration days: 1).	timeSpan5 := Timespan starting: '23 March 2024' duration:(Duration days: 2).	timeSpan6 := Timespan starting: '19 March 2024' duration:(Duration days: 2).	timeSpan7 := Timespan starting: '31 March 2024' duration:(Duration days: 4).	timeSpan8 := Timespan starting: '1 April 2024' duration:(Duration days: 5).		redGolf setRentedPeriod: timeSpan1; setRentedPeriod: timeSpan3; setRentedPeriod: timeSpan5; setRentedPeriod: timeSpan7.			self current		addCar: redPanda;		addCar: bluePanda;		addCar: whitePanda;		addCar: redTesla;		addCar: blueTesla;		addCar: redGolf.! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/21/2023 13:20'!createDemo| redPanda bluePanda yellowPanda redTesla blueTesla redGolf timeSpan1 timeSpan2 timeSpan3 timeSpan4 timeSpan5 timeSpan6 timeSpan7 timeSpan8 |	redPanda := Car1  panda.	bluePanda := Car1  panda.	yellowPanda := Car1  panda.	redTesla := Car1 tesla.	blueTesla := Car1  tesla.	redGolf := Car1  golf.	self current		addCar: redPanda;		addCar: bluePanda;		addCar: yellowPanda;		addCar: redTesla;		addCar: blueTesla;		addCar: redGolf.		timeSpan1 := Timespan starting: '15 March 2023' duration:(Duration days: 5).	timeSpan2 := Timespan starting: '13 March 2023' duration:(Duration days: 4).	timeSpan3 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan4 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan5 := Timespan starting: '23 March 2023' duration:(Duration days: 2).	timeSpan6 := Timespan starting: '19 March 2023' duration:(Duration days: 2).	timeSpan7 := Timespan starting: '31 March 2023' duration:(Duration days: 4).	timeSpan8 := Timespan starting: '1 April 2023' duration:(Duration days: 5).! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/21/2023 09:09'!initializeVoyageOnMemoryDBVOMemoryRepository new enableSingleton! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/21/2023 09:13'!initializeself reset! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/21/2023 09:14'!resetself initializeVoyageOnMemoryDB! !!CarRental1 class methodsFor: 'testing' stamp: 'BrunoLazo 3/24/2023 12:10'!createDemo2| redPanda bluePanda whitePanda redTesla blueTesla redGolf timeSpan1 timeSpan2 timeSpan3 timeSpan4 timeSpan5 timeSpan6 timeSpan7 timeSpan8 |	redPanda := Car1 price: 50 carBrand: 'Panda' carModel: 'Red Panda' picUrl:'https://www.fiat.it/content/dam/fiat/com/my23/panda/colorizer/red/Panda-figurini-colorizer-Passione-Red-desktop-680x430.png'.	bluePanda := Car1 price: 50 carBrand: 'Panda' carModel: 'Blue Panda' picUrl:'https://www.fiat.it/content/dam/fiat/com/my23/panda/colorizer/blue/Panda-figurini-colorizer-Italia-Blue-desktop-680x430.png'.	whitePanda := Car1 price: 50 carBrand: 'Panda' carModel: 'White Panda' picUrl:'https://www.fiat.it/content/dam/fiat/com/my23/panda/colorizer/white/Panda-figurini-colorizer-Gelato-White-desktop-680x430.png'.	redTesla := Car1 price: 400 carBrand: 'Tesla' carModel: 'Red Tesla' picUrl:'https://www.pngall.com/wp-content/uploads/11/Red-Tesla.png'.	blueTesla := Car1 price: 400 carBrand: 'Tesla' carModel: 'Blue Tesla' picUrl:'https://www.pngmart.com/files/21/Tesla-Car-PNG-Picture.png'.	redGolf := Car1 price: 100 carBrand: 'Golf' carModel: 'Red Golf' picUrl:'https://www.pngkit.com/png/full/211-2113073_2013-volkswagen-golf-vw-golf-5-png.png'.	self current		addCar: redPanda;		addCar: bluePanda;		addCar: whitePanda;		addCar: redTesla;		addCar: blueTesla;		addCar: redGolf.		timeSpan1 := Timespan starting: '15 March 2023' duration:(Duration days: 5).	timeSpan2 := Timespan starting: '13 March 2023' duration:(Duration days: 4).	timeSpan3 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan4 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan5 := Timespan starting: '23 March 2023' duration:(Duration days: 2).	timeSpan6 := Timespan starting: '19 March 2023' duration:(Duration days: 2).	timeSpan7 := Timespan starting: '31 March 2023' duration:(Duration days: 4).	timeSpan8 := Timespan starting: '1 April 2023' duration:(Duration days: 5).! !!CarRental1 class methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/30/2023 21:35'!createClientLogin: aLogin password: aPassword"TBAdministrator newlogin: aLogin;password: aPassword;yourself"| newClient |newClient := TBClient login: aLogin password: aPassword.self current addClient: newClient.! !!CarRental1 class methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/30/2023 16:02'!createAdministratorLogin: aLogin password: aPassword"TBAdministrator newlogin: aLogin;password: aPassword;yourself"| newAdmin |newAdmin := TBAdministrator login: aLogin password: aPassword.self current addAdministrator: newAdmin.! !TestCase subclass: #CarRentalTest1	instanceVariableNames: 'carRental previousRepository'	classVariableNames: ''	package: 'LifewareHR1'!!CarRentalTest1 methodsFor: '3 exercise' stamp: 'BrunoLazo 3/20/2023 23:39'!testRenting	"The same car cannot be rented twice. Extend the code to make this test green: define the missing (red) methods in the class CarRental"	| carRental redPanda yellowPanda blackTesla |	carRental := CarRental1  new.	redPanda := Car1  panda.	yellowPanda := Car1  panda.	blackTesla := Car1  tesla.	carRental		addCar: redPanda;		addCar: yellowPanda;		addCar: blackTesla.	self assert: carRental availableCars size equals: 3.	carRental rent: redPanda days: 5.	self assert: carRental availableCars size equals: 2.	self assert: carRental rentedCars size equals: 1.		"	self assert: (carRental totalCars select: [:each | each carType = 'Tesla']) first price equals: 400.	self assert: (carRental totalCars select: [:each | each carType = 'Tesla']) first carType equals: 'Tesla'.	self assert: (carRental totalCars select: [:each | each carType = 'Tesla']) first equals: blackTesla."! !!CarRentalTest1 methodsFor: '3 exercise' stamp: 'BrunoLazo 3/20/2023 12:57'!testFixedNumberOfCars	"Our car rental has now a fixed number of cars. Extend the code to make this test green: define the missing (red) methods in the class CarRental"	| carRental |	carRental := CarRental1 new.	carRental		addCar: Car1  panda;		addCar: Car1  panda;		addCar: Car1  tesla.	self assert: carRental totalCars size equals: 3! !!CarRentalTest1 methodsFor: '0 examples' stamp: 'BrunoLazo 3/20/2023 12:57'!testRentPanda	| carRental myPanda |	carRental := CarRental1 new.	myPanda := Car1 panda.	self assert: (carRental priceFor: myPanda days: 3) equals: 150	"self assert: myPanda rented equals: false"! !!CarRentalTest1 methodsFor: '0 examples' stamp: 'BrunoLazo 3/20/2023 12:57'!testPandaPrice	| panda |	panda := Car1 panda.	self assert: panda price equals: 50! !!CarRentalTest1 methodsFor: '2 exercise' stamp: 'BrunoLazo 3/20/2023 12:56'!testDiscountedPrice	"Starting from the 4th day, the customer gets a rebate of 10% on the daily rate"	"extend the code to make this test green"	| carRental myGolf |	carRental := CarRental1  new.	myGolf := Car1 golf.	self assert: (carRental priceFor: myGolf days: 4) equals: 390! !!CarRentalTest1 methodsFor: 'method' stamp: 'BrunoLazo 4/10/2023 21:30'!testFindGolf	| redPanda bluePanda yellowPanda redTesla blueTesla redGolf |	carRental := CarRental1  new.	redPanda := Car1  panda.	bluePanda := Car1  panda.	yellowPanda := Car1  panda.	redTesla := Car1 tesla.	blueTesla := Car1  tesla.	redGolf := Car1  golf.	carRental		addCar: redPanda;		addCar: bluePanda;		addCar: yellowPanda;		addCar: redTesla;		addCar: blueTesla;		addCar: redGolf.			"aGolf := (self totalCars select: [ :each | each carBrand = 'Golf' ]) first."			self assert: ((carRental totalCars select: [ :each | each carBrand = 'Golf' ]) first) equals: redGolf.		self assert: (carRental totalCars detect: [ :each | each carBrand = 'Golf' ]) equals: redGolf.! !!CarRentalTest1 methodsFor: 'method' stamp: 'BrunoLazo 4/11/2023 06:59'!testintersectionTimeOf	| redPanda bluePanda yellowPanda redTesla blueTesla redGolf timeSpan1 timeSpan2 timeSpan3 timeSpan4 timeSpan5 timeSpan6 timeSpan7 timeSpan8 |	carRental := CarRental1  new.	redPanda := Car1  panda.	bluePanda := Car1  panda.	yellowPanda := Car1  panda.	redTesla := Car1 tesla.	blueTesla := Car1  tesla.	redGolf := Car1  golf.	carRental		addCar: redPanda;		addCar: bluePanda;		addCar: yellowPanda;		addCar: redTesla;		addCar: blueTesla;		addCar: redGolf.		timeSpan1 := Timespan starting: '15 March 2023' duration:(Duration days: 5).	timeSpan2 := Timespan starting: '13 March 2023' duration:(Duration days: 4).	timeSpan3 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan4 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan5 := Timespan starting: '23 March 2023' duration:(Duration days: 2).	timeSpan6 := Timespan starting: '19 March 2023' duration:(Duration days: 2).	timeSpan7 := Timespan starting: '31 March 2023' duration:(Duration days: 4).	timeSpan8 := Timespan starting: '1 April 2023' duration:(Duration days: 5).		self assert: (carRental rent: redGolf timeSpan:timeSpan1) equals: 500.	self assert: (carRental intersectionTimeOf: redGolf during:timeSpan2) equals: (OrderedCollection new add: 		(Timespan starting: '15 March 2023' duration: (Duration days: 2)); yourself).	self assert: (carRental rent: redGolf timeSpan:timeSpan3) equals: 100.	self assert: (carRental intersectionTimeOf: redGolf during:timeSpan4) equals: (OrderedCollection new add: 		(Timespan starting: '20 March 2023' duration: (Duration days: 1)); yourself).	self assert: (carRental rent: redGolf timeSpan:timeSpan5) equals: 200.	self assert: (carRental intersectionTimeOf: redGolf during:timeSpan6) equals: (OrderedCollection new add: 		(Timespan starting: '19 March 2023' duration: (Duration days: 1)); add: 		(Timespan starting: '20 March 2023' duration: (Duration days: 1)); yourself).	self assert: (carRental rent: redGolf timeSpan:timeSpan7) equals: 400.	self assert: (carRental intersectionTimeOf: redGolf during:timeSpan8) equals: (OrderedCollection new add: 		(Timespan starting: '1 April 2023' duration: (Duration days: 3)); yourself).	self assert: (carRental rent: redTesla timeSpan:timeSpan8) equals: 1950.! !!CarRentalTest1 methodsFor: '1 warming up exercise' stamp: 'BrunoLazo 3/20/2023 12:58'!testTeslaPrice	|tesla|	tesla := Car1 tesla.	self assert: tesla price equals: 400	! !!CarRentalTest1 methodsFor: '1 warming up exercise' stamp: 'BrunoLazo 3/20/2023 12:58'!testRentTesla	|tesla rentalTesla|	tesla := Car1 tesla.	rentalTesla := CarRental1 new.	self assert: (rentalTesla priceFor: tesla days: 5) equals: 2000! !!CarRentalTest1 methodsFor: 'login' stamp: 'BrunoLazo 3/30/2023 12:50'!testLogin	| adm |	adm := TBAdministrator login: 'luke' password: 'thebrightside'.	self assert: adm login equals: 'luke'	! !!CarRentalTest1 methodsFor: 'login' stamp: 'BrunoLazo 4/11/2023 06:43'!testLoginPasswordInstances	| adm adm1 |	adm := TBAdministrator login: 'luke' password: 'thebrightside'.	adm1 := TBAdministrator login: 'luke1' password: 'thebrightside1'.	self assert: (TBAdministrator allInstances anySatisfy: [ :a | a login = 'luke' and: [ a password = (SHA256 hashMessage: 'thebrightside') ] ]) equals: true.	self assert: (TBAdministrator allInstances anySatisfy: [ :a | a login = 'luke1' and: [ a password = (SHA256 hashMessage: 'thebrightside1') ] ]) equals: true.	! !!CarRentalTest1 methodsFor: 'login' stamp: 'BrunoLazo 4/11/2023 06:58'!testRegistration	| adm adm1 loginInput1 loginInput2 passwordInput1 passwordInput2 passwordInput3 |	adm := TBClient login: 'bob' password: 'sugar'.	adm1 := TBClient login: 'steve' password: 'jobs'.	loginInput1 := 'bob'.	loginInput2 := 'mark'.	passwordInput1 := 'baker'.	passwordInput2 := 'baker'.	passwordInput3 := 'parker'.	self assert: (TBClient allInstances allSatisfy: [ :a | a login ~= loginInput1 ]) equals: false.	self assert: (TBClient allInstances allSatisfy: [ :a | a login ~= loginInput2 ]) equals: true.	self assert: (SHA256 hashMessage: passwordInput1) = (SHA256 hashMessage: passwordInput2) equals: true.	self assert: (SHA256 hashMessage: passwordInput1) = (SHA256 hashMessage: passwordInput3) equals: false.	self assert: ((TBClient allInstances allSatisfy: [ :a | a login ~= loginInput2 ]) and: [ (SHA256 hashMessage: passwordInput1) = (SHA256 hashMessage: passwordInput2) ]) equals: true.	self assert: ((TBClient allInstances allSatisfy: [ :a | a login ~= loginInput1 ]) and: [ (SHA256 hashMessage: passwordInput1) = (SHA256 hashMessage: passwordInput2) ]) equals: false.	self assert: ((TBClient allInstances allSatisfy: [ :a | a login ~= loginInput2 ]) and: [ (SHA256 hashMessage: passwordInput1) = (SHA256 hashMessage: passwordInput3) ]) equals: false.! !!CarRentalTest1 methodsFor: 'login' stamp: 'BrunoLazo 4/11/2023 06:37'!testLoginInstances	| adm adm1 |	adm := TBAdministrator login: 'luke' password: 'thebrightside'.	adm1 := TBAdministrator login: 'luke1' password: 'thebrightside1'.	self assert: (TBAdministrator allInstances anySatisfy: [ :a | a login = 'luke' ]) equals: true.	self assert: (TBAdministrator allInstances anySatisfy: [ :a | a login = 'luke1' ]) equals: true	! !!CarRentalTest1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/22/2023 09:33'!setUppreviousRepository := VORepository current.VORepository setRepository: VOMemoryRepository new.! !!CarRentalTest1 methodsFor: 'initialization' stamp: 'BrunoLazo 3/22/2023 09:34'!tearDownVORepository setRepository: previousRepository! !!CarRentalTest1 methodsFor: '1.1 examples ' stamp: 'BrunoLazo 3/20/2023 12:53'!testBooleanCondition	| counter |	counter := OrderedCollection new.	1 > 0		ifTrue: [ counter add: 1 ]		ifFalse: [ counter add: 2 ].	self assert: counter first equals: 1! !!CarRentalTest1 methodsFor: '4 exercise' stamp: 'BrunoLazo 4/11/2023 13:25'!testRentingWithDates	"Extend the code and write a test for the following scenario: Our car rentals has 3, 2 tesla and 1 golf. Customer Bob call our service asking for a golf for 5 days starting on the 1st of April. Unfortunately the golf is already rented up to the 3rd of april. Our service tells Bob that we have two available teslas, and that they can provide an individual discount of 10 euros per day. Our informatic system should offer the functionalities to sustain the above scenario, for example it should know whether the panda is free in the requested period and so on...write test case(s) and code to simulate this scenario"	| redPanda bluePanda yellowPanda redTesla blueTesla redGolf timeSpan1 timeSpan2 timeSpan3 timeSpan4 timeSpan5 timeSpan6 timeSpan7 timeSpan8 |	carRental := CarRental1  new.	redPanda := Car1  panda.	bluePanda := Car1  panda.	yellowPanda := Car1  panda.	redTesla := Car1 tesla.	blueTesla := Car1  tesla.	redGolf := Car1  golf.	carRental		addCar: redPanda;		addCar: bluePanda;		addCar: yellowPanda;		addCar: redTesla;		addCar: blueTesla;		addCar: redGolf.		timeSpan1 := Timespan starting: '15 March 2023' duration:(Duration days: 5).	timeSpan2 := Timespan starting: '13 March 2023' duration:(Duration days: 4).	timeSpan3 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan4 := Timespan starting: '20 March 2023' duration:(Duration days: 1).	timeSpan5 := Timespan starting: '23 March 2023' duration:(Duration days: 2).	timeSpan6 := Timespan starting: '19 March 2023' duration:(Duration days: 2).	timeSpan7 := Timespan starting: '31 March 2023' duration:(Duration days: 4).	timeSpan8 := Timespan starting: '1 April 2023' duration:(Duration days: 3).		self assert: (carRental rent: redGolf timeSpan:timeSpan1) equals: 500.	self assert: (carRental rent: redGolf timeSpan:timeSpan2) equals: (OrderedCollection new add: 		(Timespan starting: '15 March 2023' duration: (Duration days: 2)); yourself).	self assert: (carRental rent: redGolf timeSpan:timeSpan3) equals: 100.	self assert: (carRental rent: redGolf timeSpan:timeSpan4) equals: (OrderedCollection new add: 		(Timespan starting: '20 March 2023' duration: (Duration days: 1)); yourself).	self assert: (carRental rent: redGolf timeSpan:timeSpan5) equals: 200.	self assert: (carRental rent: redGolf timeSpan:timeSpan6) equals: (OrderedCollection new add: 		(Timespan starting: '19 March 2023' duration: (Duration days: 1)); add: 		(Timespan starting: '20 March 2023' duration: (Duration days: 1)); yourself).	self assert: (carRental rent: redGolf timeSpan:timeSpan7) equals: 400.	self assert: (carRental rent: redGolf timeSpan:timeSpan8) equals: (OrderedCollection new add: 		(Timespan starting: '1 April 2023' duration: (Duration days: 3)); yourself).	self assert: (carRental rent: redTesla timeSpan:timeSpan8) equals: 1170."	Transcript open; show: redGolf rentedPeriod; cr."		"	Transcript show: (carRental rent: redPanda days: 1 startingDay: '16 March 2023'); cr.	Transcript show: (redPanda rentedPeriod); cr.		Transcript show: (carRental rent: redPanda days: 1 startingDay: '18 March 2023'); cr.	Transcript show: (redPanda rentedPeriod); cr.		Transcript show: (carRental rent: redPanda days: 3 startingDay: '15 March 2023'); cr.		Transcript show: (carRental rent: redPanda days: 1 startingDay: '28 March 2023'); cr.				Transcri19 show: (redPanda rentedPeriod); cr"	"	self assert: (carRental rent: redPanda days: 3 startingDay: '15 March 2023') equals: false.	Transcript show: (redPanda rentedPeriod); cr	"	"	carRental rent: redPanda days: 3 startingDay: '15 March 2023'.	Transcript open; show: redPanda rentedPeriod; cr.	carRental rent: redPanda days: 1 startingDay: '16 March 2023'.	Transcript show: redPanda rentedPeriod; cr.	"	"	Transcript open; show: (carRental rent: redPanda days: 3 startingDay: '15 March 2023'); cr.	Transcript show: (carRental rent: redPanda days: 1 startingDay: '26 March 2023'); cr.	Transcript show: (carRental rent: redPanda days: 1 startingDay: '16 March 2023'); cr.	Transcript show: redPanda rentedPeriod; cr.	"! !Object subclass: #TBUser	instanceVariableNames: 'login password'	classVariableNames: ''	package: 'LifewareHR1'!!TBUser methodsFor: 'accessing' stamp: 'BrunoLazo 3/28/2023 22:05'!password^ password! !!TBUser methodsFor: 'accessing' stamp: 'BrunoLazo 3/28/2023 22:05'!login^ login! !!TBUser methodsFor: 'accessing' stamp: 'BrunoLazo 3/28/2023 22:05'!login: anObjectlogin := anObject! !!TBUser methodsFor: 'accessing' stamp: 'BrunoLazo 3/28/2023 22:05'!password: anObjectpassword := SHA256 hashMessage: anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBUser class	instanceVariableNames: ''!!TBUser class methodsFor: 'creation' stamp: 'BrunoLazo 3/28/2023 22:06'!login: login password: password^ self newlogin: login;password: password;yourself! !TBUser subclass: #TBAdministrator	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1'!TBUser subclass: #TBClient	instanceVariableNames: 'rented budget'	classVariableNames: ''	package: 'LifewareHR1'!!TBClient methodsFor: 'accessing' stamp: 'BrunoLazo 4/5/2023 11:51'!budget: aBudgetbudget := aBudget! !!TBClient methodsFor: 'accessing' stamp: 'BrunoLazo 4/8/2023 12:35'!rented: aTextrented add: aText.! !!TBClient methodsFor: 'accessing' stamp: 'BrunoLazo 4/5/2023 11:49'!rented^ rented! !!TBClient methodsFor: 'accessing' stamp: 'BrunoLazo 4/5/2023 11:51'!budget^ budget! !!TBClient methodsFor: 'initialization' stamp: 'BrunoLazo 4/12/2023 10:08'!initializeself budget: 3000.rented := OrderedCollection new! !CarRental1 initialize!WAComponent subclass: #TBApplicationRootComponent	instanceVariableNames: 'main'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/22/2023 21:51'!updateRoot: anHtmlRootsuper updateRoot: anHtmlRoot.anHtmlRoot beHtml5.anHtmlRoot title: 'LifewareHR1'! !!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/22/2023 22:45'!renderContentOn: htmlhtml render: main! !!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 07:04'!main: aComponentmain := aComponent"not used?"! !!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/22/2023 22:51'!children^ { main }! !!TBApplicationRootComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/23/2023 12:25'!initializesuper initialize."main := TBScreenComponent new"main := TBCarsListComponent new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBApplicationRootComponent class	instanceVariableNames: ''!!TBApplicationRootComponent class methodsFor: 'initialization' stamp: 'BrunoLazo 3/30/2023 09:52'!initialize"self initialize"| app |app := WAAdmin register: self asApplicationAt: 'LifewareHR1'.apppreferenceAt: #sessionClass put: TBSession.appaddLibrary: JQDeploymentLibrary;addLibrary: JQUiDeploymentLibrary;addLibrary: TBSDeploymentLibrary! !!TBApplicationRootComponent class methodsFor: 'initialization' stamp: 'BrunoLazo 3/22/2023 21:47'!canBeRoot^ true! !WAComponent subclass: #TBBrandsComponent	instanceVariableNames: 'brands carsList'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBBrandsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/25/2023 20:18'!renderBrandLinkOn: html with: aBrandhtml tbsLinkifyListGroupItemclass: 'active' if: aBrand = self carsList currentBrand;callback: [ self selectBrand: aBrand ];with: (aBrand ifNotNil: [ aBrand ] ifNil: [ 'All Brands' ])! !!TBBrandsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/25/2023 14:26'!renderContentOn: html	html tbsListGroup		style: 'display: flex; flex-wrap: wrap;';		with: [			html tbsListGroupItem.			self renderBrandLinkOn: html with: nil.			brands do: [ :cat |				self renderBrandLinkOn: html with: cat ] ]"renderContentOn: htmlhtml tbsListGroup: [html tbsListGroupItem.self renderBrandLinkOn: html with: nil.brands do: [ :cat |self renderBrandLinkOn: html with: cat ] ]"! !!TBBrandsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/24/2023 14:56'!selectBrand: aBrandcarsList currentBrand: aBrand! !!TBBrandsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/24/2023 14:43'!brands^ brands! !!TBBrandsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/24/2023 14:44'!carsList^ carsList! !!TBBrandsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/24/2023 14:44'!brands: aCollectionbrands := aCollection asSortedCollection! !!TBBrandsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/24/2023 14:45'!carsList: aComponentcarsList := aComponent! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBBrandsComponent class	instanceVariableNames: ''!!TBBrandsComponent class methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/24/2023 14:47'!brands: brands carsList: aTBScreen^ self new brands: brands; carsList: aTBScreen! !WAComponent subclass: #TBCarComponent	instanceVariableNames: 'car component'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBCarComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/24/2023 11:02'!picUrl^ car picUrl! !!TBCarComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/24/2023 10:59'!carModel^ car carModel! !!TBCarComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/24/2023 10:59'!initializesuper initialize.car := Car1 new! !!TBCarComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/24/2023 12:02'!car: aCarcar := aCar! !!TBCarComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 11:20'!renderButtonOn: htmlhtml form: [			html tbsButton			style: 'display: inline-block; margin-top: 10px; padding: 10px 20px; border-radius: 5px; background-color: #007bff; color: white; text-decoration: none;';			callback: [ component showCarDetails: car ];			with: [ html text: 'View Car' ] ]! !!TBCarComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 11:21'!renderImageOn: html      html div		style: 'height: 100%; display: flex; align-items: center; max-width: 100%; max-height: 100%;';      with: [ html image      		url: self picUrl;			style: 'width: 100%; height: auto;';      		altText: self carModel ]! !!TBCarComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 11:22'!renderContentOn: html	html div	style: 'width: 100%; height: 350px; display: flex; flex-direction: column; align-items: center; justify-content: space-between; margin-bottom: 20px; padding: 20px; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);';	with: [		self renderImageOn: html.      	self renderParagraphOn: html.      	self renderButtonOn: html		].! !!TBCarComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/28/2023 00:09'!component: anObjectcomponent := anObject! !!TBCarComponent methodsFor: 'rendering' stamp: 'BrunoLazo 3/28/2023 00:09'!component^ component! !!TBCarComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 14:15'!renderParagraphOn: html	html paragraph	style: 'font-size: 18px; font-weight: bold; margin-top: 10px;';   with: self carModel! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBCarComponent class	instanceVariableNames: ''!!TBCarComponent class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/28/2023 00:09'!from: aComponent car: aCar^ self newcar: aCar;component: aComponent;yourself! !TBSMagritteReport subclass: #TBCarsReport	instanceVariableNames: 'carRental'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:04'!renderAddCarForm: aCar^ aCar asComponentaddDecoration: (TBSMagritteFormDecoration buttons: { #save -> 'Add car' . #cancel -> 'Cancel'});yourself! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:23'!viewCar: aCarself call: (self renderViewCarForm: aCar)! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:44'!addCar| car |car := self call: (self renderAddCarForm: Car1 new).car ifNotNil: [ carRental addCar: car.self refreshReport ]! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:19'!renderViewCarForm: aCar^ aCar asComponentaddDecoration: (TBSMagritteFormDecoration buttons: { #cancel -> 'Back' });readonly: true;yourself! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 19:45'!renderContentOn: htmlhtml tbsGlyphIcon iconPencil.html anchorcallback: [ self addCar ];with: 'Add car'.super renderContentOn: html! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:46'!refreshReportself rows: carRental totalCars.self refresh.! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 4/3/2023 08:39'!deleteCar: aCar(self confirm: 'Do you want remove this car ?')ifTrue: [ carRental removeCar: aCar.self refreshReport ]! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:26'!renderEditCarForm: aCar^ aCar asComponent addDecoration: (TBSMagritteFormDecoration buttons: {#save -> 'Save post'. #cancel -> 'Cancel'});yourself! !!TBCarsReport methodsFor: 'rendering' stamp: 'BrunoLazo 3/31/2023 20:27'!editCar: aCar| car |car := self call: (self renderEditCarForm: aCar).car ifNotNil: [ carRental save ]! !!TBCarsReport methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 19:29'!carRental ^ carRental! !!TBCarsReport methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 19:31'!carRental: aCarRental1carRental := aCarRental1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBCarsReport class	instanceVariableNames: ''!!TBCarsReport class methodsFor: 'instance creation' stamp: 'BrunoLazo 4/11/2023 14:52'!from: aCarRental"define the rows and columns for the Car Rental report. define commands to view, edit and delete each car"| report allCars |allCars := aCarRental totalCars.report := self rows: allCars description: (self filteredDescriptionsFrom: allCars anyOne).report carRental: aCarRental.report addColumn: (MACommandColumn newaddCommandOn: report selector: #viewCar: text: 'View';yourself;addCommandOn: report selector: #editCar: text: 'Edit';yourself;addCommandOn: report selector: #deleteCar: text: 'Delete';yourself).^ report! !!TBCarsReport class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/31/2023 21:07'!filteredDescriptionsFrom: aCar"Filter only some descriptions for the report columns."^ aCar magritteDescriptionselect: [ :each | #(carModel carBrand description price) includes: each accessorselector ]! !WAComponent subclass: #TBConfirmationComponent	instanceVariableNames: 'component'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBConfirmationComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/3/2023 13:24'!component^ component! !!TBConfirmationComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/3/2023 13:25'!component: anObjectcomponent := anObject! !!TBConfirmationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 15:08'!renderHeaderOn: htmlhtml tbsModalHeader: [	html tbsModalCloseIcon.	html tbsModalTitle	level: 4;	with: 'Renting' ]! !!TBConfirmationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/6/2023 09:44'!renderButtonsOn: htmlhtml tbsButtonattributeAt: 'type' put: 'button';attributeAt: 'data-dismiss' put: 'modal';beDefault;value: 'Cancel'.html tbsSubmitButtonbePrimary;callback: [ self validate ];value: 'Rent'! !!TBConfirmationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 15:04'!renderContentOn: htmlhtml tbsModalid: 'myConfirmationDialog';with: [	html tbsModalDialog: [		html tbsModalContent: [			self renderHeaderOn: html.			self renderBodyOn: html ] ] ]! !!TBConfirmationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/6/2023 09:45'!validate^ component renting! !!TBConfirmationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 14:54'!renderBodyOn: htmlhtml tbsModalBody: [	html label with: component confirmationMessage1.	html tbsForm: [		html tbsModalFooter: [ self renderButtonsOn: html ]	] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBConfirmationComponent class	instanceVariableNames: ''!!TBConfirmationComponent class methodsFor: 'instance creation' stamp: 'BrunoLazo 4/3/2023 13:23'!from: aComponent^ self newcomponent: aComponent;yourself! !WAComponent subclass: #TBFormComponent	instanceVariableNames: 'password account component'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBFormComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 11:42'!password^ password! !!TBFormComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 11:42'!account^ account! !!TBFormComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 11:42'!component: anObjectcomponent := anObject! !!TBFormComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 11:42'!password: anObjectpassword := anObject! !!TBFormComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 11:42'!component^ component! !!TBFormComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 11:42'!account: anObjectaccount := anObject! !!TBFormComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 20:49'!renderAccountFieldOn: htmlhtml tbsFormGroup: [ 	html label with: 'Account'.	html textInput tbsFormControl;	attributeAt: 'autofocus' put: 'true';	callback: [ :value | account := value ];	value: account ]! !!TBFormComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:00'!renderPasswordFieldOn: htmlhtml tbsFormGroup: [	html label with: 'Password'.	html passwordInput tbsFormControl;	callback: [ :value | password := value ];	value: password ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBFormComponent class	instanceVariableNames: ''!!TBFormComponent class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/30/2023 11:41'!from: aComponent^ self newcomponent: aComponent;yourself! !TBFormComponent subclass: #TBAuthentificationComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:10'!renderHeaderOn: htmlhtml tbsModalHeader: [	html tbsModalCloseIcon.	html tbsModalTitle level: 4;	with: 'Authentication' ]! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:03'!renderButtonsOn: htmlhtml tbsButtonattributeAt: 'type' put: 'button';attributeAt: 'data-dismiss' put: 'modal';beDefault;value: 'Cancel'.html tbsSubmitButton bePrimary;callback: [ self validate ];value: 'SignIn'! !!TBAuthentificationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:02'!renderBodyOn: htmlhtml tbsModalBody: [	html tbsForm: [		self renderAccountFieldOn: html.		self renderPasswordFieldOn: html.		html tbsModalFooter: [ self renderButtonsOn: html ]	]]! !TBAuthentificationComponent subclass: #TBAdminAuthentificationComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBAdminAuthentificationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:17'!renderContentOn: htmlhtml tbsModalid: 'myAuthDialogAdmin';with: [	html tbsModalDialog: [		html tbsModalContent: [			self renderHeaderOn: html.			self renderBodyOn: html ] ] ]! !!TBAdminAuthentificationComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 10:56'!validate^ component tryAdminConnectionWithLogin: self account andPassword: self password! !TBAuthentificationComponent subclass: #TBClientAuthentificationComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBClientAuthentificationComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:20'!renderContentOn: htmlhtml tbsModalid: 'myAuthDialogClient';with: [	html tbsModalDialog: [		html tbsModalContent: [			self renderHeaderOn: html.			self renderBodyOn: html ] ] ]! !!TBClientAuthentificationComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 10:47'!validate^ component tryClientConnectionWithLogin: self account andPassword: self password! !WAComponent subclass: #TBHeaderComponent	instanceVariableNames: 'component'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBHeaderComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/26/2023 18:20'!component^ component! !!TBHeaderComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/26/2023 18:20'!component: anObjectcomponent := anObject! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:37'!renderButtonsOn: htmlself session isLoggedifTrue: [ 	(self session currentUser isKindOf: TBAdministrator) 		ifTrue: [ self renderSimpleAdminButtonOn: html ]		ifFalse: [ self renderSimpleClientButtonOn: html ] ]ifFalse: [ 	self renderModalAdminButtonOn: html. 	self renderModalClientButtonOn: html. 	self renderCreateClientButtonOn: html ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:37'!renderContentOn: htmlhtml tbsNavbar beDefault; with: [	html tbsContainer: [		self renderBrandOn: html.		self renderButtonsOn: html	] ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:41'!renderCreateClientButtonOn: htmlhtml render: (TBRegistration from: component).html tbsNavbarButton tbsPullRight;attributeAt: 'data-target' put: '#myRegisterDialog';attributeAt: 'data-toggle' put: 'modal';with: [	html tbsGlyphIcon iconLock.	html text: ' Client Signup' ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:42'!renderSimpleAdminButtonOn: htmlhtml form: [	html tbsNavbarButton tbsPullRight;	callback: [ component goToAdministrationView ];	with: [		html tbsGlyphIcon iconListAlt.		html text: ' Admin View' ] ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:41'!renderModalClientButtonOn: htmlhtml render: (TBClientAuthentificationComponent from: component).html tbsNavbarButton tbsPullRight;attributeAt: 'data-target' put: '#myAuthDialogClient';attributeAt: 'data-toggle' put: 'modal';with: [	html tbsGlyphIcon iconLock.	html text: ' Client Login' ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:28'!renderBrandOn: htmlhtml tbsNavbarHeader: [	html tbsNavbarBrand	url: self application url;	with: 'RentAutoNow' ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:41'!renderModalAdminButtonOn: htmlhtml render: (TBAdminAuthentificationComponent from: component).html tbsNavbarButton tbsPullRight;attributeAt: 'data-target' put: '#myAuthDialogAdmin';attributeAt: 'data-toggle' put: 'modal';with: [	html tbsGlyphIcon iconLock.	html text: ' Admin Login' ]! !!TBHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:43'!renderSimpleClientButtonOn: htmlhtml form: [	html tbsNavbarButton tbsPullRight;	callback: [ component goToClientView ];	with: [		html tbsGlyphIcon iconListAlt.		html text: ' Client View' ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TBHeaderComponent class	instanceVariableNames: ''!!TBHeaderComponent class methodsFor: 'instance creation' stamp: 'BrunoLazo 3/26/2023 18:22'!from: aComponent^ self newcomponent: aComponent;yourself! !TBHeaderComponent subclass: #TBLoginHeaderComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBLoginHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:43'!renderButtonsOn: htmlhtml form: [	self renderDisconnectButtonOn: html.	self renderPublicViewButtonOn: html ]! !!TBLoginHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:44'!renderDisconnectButtonOn: htmlhtml tbsNavbarButton tbsPullRight;callback: [ self session reset ];with: [	html text: 'Disconnect '.	html tbsGlyphIcon iconLogout ]! !!TBLoginHeaderComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:58'!renderPublicViewButtonOn: htmlself session isLogged ifTrue: [	html tbsNavbarButton tbsPullRight;	callback: [ component goToCarListView ];	with: [		html tbsGlyphIcon iconEyeOpen.		html text: ' Public View' ] ]! !TBFormComponent subclass: #TBRegistration	instanceVariableNames: 'password2'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBRegistration methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 12:10'!password2^ password2! !!TBRegistration methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 13:52'!validate^ component tryRegistrationWithLogin: self account andPassword: self password repeated: self password2! !!TBRegistration methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:26'!renderHeaderOn: htmlhtml tbsModalHeader: [	html tbsModalCloseIcon.	html tbsModalTitle level: 4;	with: 'Registration' ]! !!TBRegistration methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:25'!renderButtonsOn: htmlhtml tbsButtonattributeAt: 'type' put: 'button';attributeAt: 'data-dismiss' put: 'modal';beDefault;value: 'Cancel'.html tbsSubmitButton bePrimary;callback: [ self validate ];value: 'SignUp'! !!TBRegistration methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:25'!renderContentOn: htmlhtml tbsModalid: 'myRegisterDialog';with: [	html tbsModalDialog: [		html tbsModalContent: [			self renderHeaderOn: html.			self renderBodyOn: html ] ] ]! !!TBRegistration methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:24'!renderBodyOn: htmlhtml tbsModalBody: [	html tbsForm: [		self renderAccountFieldOn: html.		self renderPasswordFieldOn: html.		self renderPasswordReapeatFieldOn: html.		html tbsModalFooter: [ self renderButtonsOn: html ]	] ]! !!TBRegistration methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 21:26'!renderPasswordReapeatFieldOn: htmlhtml tbsFormGroup: [	html label with: 'Repeat the Password'.	html passwordInput tbsFormControl;	callback: [ :value | password2 := value ];	value: password2 ]! !WAComponent subclass: #TBScreenComponent	instanceVariableNames: 'header errorMessage showError'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBScreenComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/26/2023 18:26'!createHeaderComponent^ TBHeaderComponent from: self! !!TBScreenComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/23/2023 10:00'!initializesuper initialize.header := self createHeaderComponent! !!TBScreenComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 22:02'!renderErrorMessageIfAnyOn: htmlself hasError ifTrue: [	showError := false.	html tbsAlert beDanger;	with: self errorMessage]! !!TBScreenComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/3/2023 14:17'!goToAdministrationView self call: TBAdminComponent new! !!TBScreenComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/3/2023 14:17'!goToClientView self call: TBClientComponent new! !!TBScreenComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/23/2023 10:09'!children^ { header }! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/3/2023 14:29'!signupErrorMessageerrorMessage := 'Username already exists / Incorrect passwords'! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/3/2023 14:17'!hasError^ showError ifNil: [ false ]! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/11/2023 22:04'!tryAdminConnectionWithLogin: login andPassword: password| currentAdmin |currentAdmin := TBAdministrator allInstances detect: [ :a | a login = login and: [ a password = (SHA256 hashMessage: password) ] ] ifNone: [ nil ].currentAdmin 	ifNotNil: [ self session currentUser: currentAdmin. self goToAdministrationView ]	ifNil: [ self loginErrorMessage; errorOccurred ]"(TBAdministrator allInstances anySatisfy: [ :a | a login = login and: [ a password = (SHA256 hashMessage: password) ] ])ifTrue: [ self goToAdministrationView ]ifFalse: [ self loginErrorMessage; errorOccurred ]"! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/3/2023 14:17'!loginErrorMessageerrorMessage := 'Incorrect login and/or password'! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/11/2023 22:10'!tryRegistrationWithLogin: login andPassword: password repeated: password2((TBClient allInstances allSatisfy: [ :a | a login ~= login ]) and: [ (SHA256 hashMessage: password) = (SHA256 hashMessage: password2) ])ifTrue: [ CarRental1 createClientLogin: login password: password ]ifFalse: [ self signupErrorMessage; errorOccurred ]! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/3/2023 14:17'!errorOccurredshowError := true! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/11/2023 22:00'!carRental^ CarRental1 current! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 3/23/2023 10:13'!renderContentOn: htmlhtml render: header! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/11/2023 22:07'!tryClientConnectionWithLogin: login andPassword: password| currentClient |currentClient := TBClient allInstances detect: [ :a | a login = login and: [ a password = (SHA256 hashMessage: password) ] ] ifNone: [ nil ].currentClient 	ifNotNil: [ self session currentUser: currentClient. "self goToClientView" ]	ifNil: [ self loginErrorMessage; errorOccurred ]"(TBClient allInstances anySatisfy: [ :a | a login = login and: [ a password = (SHA256 hashMessage: password) ] ])ifTrue: [ self goToClientView ]ifFalse: [ self loginErrorMessage; errorOccurred ]"! !!TBScreenComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/3/2023 14:17'!errorMessage^ errorMessage! !TBScreenComponent subclass: #TBCarDetailsComponent	instanceVariableNames: 'car startDay startMonth startYear endDay endMonth endYear dateStart dateEnd confirmationMessage confirmationMessage1 outcomeMessage outcomeAvailability timespanSelected'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:42'!endMonth ^ endMonth! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:43'!endYear ^ endYear! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/28/2023 09:08'!car: aCarcar := aCar! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:42'!startYear: aYearstartYear := aYear! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/8/2023 12:44'!startDay: aDaystartDay := aDay! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:28'!startDay ^ startDay! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:41'!startMonth ^ startMonth! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/5/2023 10:52'!timespanSelected^ timespanSelected! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:41'!startYear ^ startYear! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/8/2023 12:44'!endDay ^ endDay! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/3/2023 21:17'!confirmationMessage: aMessageconfirmationMessage := aMessage! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:43'!endMonth: aMonthendMonth := aMonth! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:42'!endDay: aDayendDay := aDay! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/28/2023 09:35'!car^ car! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:41'!startMonth: aMonthstartMonth := aMonth! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/2/2023 10:43'!endYear: aYearendYear := aYear! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/3/2023 21:17'!confirmationMessage^ confirmationMessage! !!TBCarDetailsComponent methodsFor: 'accessing' stamp: 'BrunoLazo 4/5/2023 10:52'!timespanSelected: aTimespantimespanSelected := aTimespan! !!TBCarDetailsComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/4/2023 13:22'!dateErrorMessageerrorMessage := 'Incorrect rental period selected: you can''t select a date in the past; the end date must be greater than or equal to the start date'.! !!TBCarDetailsComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/12/2023 00:16'!dateIntersectionErrorMessage: aList| timeList |timeList := (aList collect: [ :each | 'Start date: ', each start asDate asString, ', end date: ', each end asDate asString, '. ' ]) asStringWithCr.errorMessage := 'You can''t rent a car in a time span in which the car has already been rented. ', timeList.! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/8/2023 12:47'!confirmationMessage1: aMessageconfirmationMessage1 := aMessage! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:35'!renderRentButtonOn: htmlhtml render: (TBConfirmationComponent from: self).html tbsNavbarButton tbsPullRight;attributeAt: 'data-target' put: '#myConfirmationDialog';attributeAt: 'data-toggle' put: 'modal';with: [	html tbsGlyphIcon iconCreditCard.	html text: ' Confirm' ]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:15'!renderStartDateOn: htmlhtml labelwith: 'Start Date:'.html dateInputday: self startDay; month: self startMonth ; year: self startYear;setValueWithNewDate;options: #(day month year);callback: [ :value | 	dateStart := value asDate.	self startDay: dateStart dayOfMonth.	self startMonth: dateStart monthIndex.	self startYear: dateStart year ]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:32'!renderContentOn: htmlsuper renderContentOn: html.self checkTimespanSelected: html.self renderOutcomeIfAnyOn: html.self renderErrorMessageIfAnyOn: html.html divstyle: 'display: flex; justify-content: center; margin-bottom: 20px;';with: [	self renderLeftColumnOn: html.	self renderCenterColumnOn: html.	self renderRightColumnOn: html.	]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:34'!renderOutcomeIfAnyOn: htmloutcomeAvailability ifTrue: [	outcomeAvailability := false.	html tbsAlert	with: outcomeMessage]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:29'!renderCenterColumnOn: htmlhtml divstyle: 'display: flex; flex-direction: column; flex-grow: 1; margin-right: 20px;';with: [	self renderCarModelOn: html.	self renderCarBrandOn: html.	self renderCarDescriptionOn: html.	self renderCarPriceOn: html.	self renderRentalPeriodOn: html.]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:05'!renderBackButtonOn: htmlhtml form: [	html tbsButton	style: 'margin-top: 10px; padding: 10px 20px; border-radius: 5px; background-color: #007bff; color: white; text-decoration: none;';	callback: [ self answer ];	with: [ html text: 'Return back' ]].html break        ! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:56'!renting(self session currentUser budget)>=(self carRental price: car timeSpan: timespanSelected)ifTrue: [ 	self session currentUser budget: (self session currentUser budget) - (self carRental price: car timeSpan: timespanSelected).	self session currentUser rented: car carModel, ', rented from: ', timespanSelected start asDate asString, ' to: ', timespanSelected end asDate asString.	self car setRentedPeriod: timespanSelected.	outcomeMessage := 'Car rented succesfully.' ]ifFalse:	[ outcomeMessage := 'Error: Insufficient funds.' ].outcomeAvailability := true! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:31'!renderRightColumnOn: htmlhtml divstyle: 'display: flex; flex-direction: column; align-items: center; justify-content: center; flex-grow: 1;';with: [	html paragraph	with: 'Select rental period: '.	html form: [		self renderStartDateOn: html.		html break."html div:["		self renderEndDateOn: html." ]."		self renderCheckPriceButtonOn: html.  	].	self checkErrors: html.]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:12'!renderCheckPriceButtonOn: htmlhtml divstyle: 'text-align: center';with:[	html button	text: 'Check the rental period';	onClick: 'location.reload();' ]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:11'!renderCarBrandOn: htmlhtml paragraphstyle: 'font-size: 15px; font-weight: bold; margin-top: 0px;';with: car carBrand.! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:33'!renderEndDateOn: htmlhtml labelwith: 'End Date:'.html dateInputday: self endDay; month: self endMonth ; year: self endYear;setValueWithNewDate;options: #(day month year);callback: [ :value |         	dateEnd := value asDate.	self endDay: dateEnd dayOfMonth.	self endMonth: dateEnd monthIndex.	self endYear: dateEnd year]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/11/2023 23:22'!initialize   super initialize.   self startDay: Date today dayOfMonth.   self startMonth: Date today monthIndex.   self startYear: Date today year.   self endDay: Date today dayOfMonth.   self endMonth: Date today monthIndex.   self endYear: Date today year. 	dateStart := Date today.   dateEnd := Date today.	outcomeAvailability := false.! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:21'!renderRentalPeriodOn: htmlhtml paragraphstyle: 'font-size: 16px; margin-top: 10px; margin-bottom: 0px;';with: 'Rental period:'.html orderedListlist: ((car rentedPeriod sort: [ :a :b | a start < b start ] ) collect: [ :each |	html listItem: [		html text: 'Start date: ', each start asDate asString, ', end date: ', each end asDate asString	]]).! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:10'!renderCarModelOn: htmlhtml paragraphstyle: 'font-size: 20px; font-weight: bold; margin-top: 5px; margin-bottom: 0px;';with: car carModel.! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:14'!renderCarPriceOn: htmlhtml paragraphstyle: 'font-size: 16px; margin-top: 10px;';with: 'Price/day: €', car price asString.! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/8/2023 12:44'!confirmationMessage1^ confirmationMessage1! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:08'!checkErrors: htmlself hasErrorifFalse: [ 	self confirmationMessage: timespanSelected duration days asString, ' days rented: €', (self carRental price: car timeSpan: timespanSelected) asString.		html paragraph with: confirmationMessage.	(self session currentUser isKindOf: TBClient) 	ifTrue: [ 		self confirmationMessage1: 'Start date: ', timespanSelected start asDate asString, ', end date: ', timespanSelected end asDate asString,'. ',timespanSelected duration days asString, ' days renting the ',car carModel ,': €', (self carRental price: car timeSpan: timespanSelected) asString.		self renderRentButtonOn: html 	] ]"self session isLoggedifTrue: [ (self session currentUser isKindOf: TBAdministrator)    ifTrue: [ self renderSimpleAdminButtonOn: html ]    ifFalse: [ self renderSimpleClientButtonOn: html ] ]ifFalse: [ self renderModalAdminButtonOn: html. self renderModalClientButtonOn: html. self renderCreateClientButtonOn: html ]."! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:04'!renderImageOn: htmlhtml imageurl: car picUrl;style: 'width: 350px; height: auto;';altText: car carModel.        ! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 00:44'!checkTimespanSelected: html| intersection |self timespanSelected: (Timespan starting: dateStart ending: (dateEnd + 1 days)).(dateStart <= dateEnd) & (dateStart >= Date today)ifTrue: [ 	intersection := self carRental intersectionTimeOf: car during: timespanSelected.	intersection 	ifEmpty: [ showError := false ]	ifNotEmpty: [ self dateIntersectionErrorMessage: intersection; errorOccurred ]]ifFalse: [ self dateErrorMessage; errorOccurred ]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 02:13'!renderCarDescriptionOn: htmlhtml paragraphstyle: 'font-size: 16px; margin-top: 10px;';with: car description.! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:27'!renderLeftColumnOn: htmlhtml divstyle: 'display: flex; flex-direction: column; margin-bottom: 20px;';with: [	self renderBackButtonOn: html.	self renderImageOn: html.      ]! !!TBCarDetailsComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:34'!renderErrorMessageIfAnyOn: html(self session currentUser isKindOf: TBClient) ifFalse: [	html tbsAlert beDanger;	with: 'To rent a Car you have to login with your Client account'].self hasError ifTrue: [	html tbsAlert beDanger;	with: self errorMessage]! !TBScreenComponent subclass: #TBCarsListComponent	instanceVariableNames: 'currentBrand'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBCarsListComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/24/2023 14:53'!currentBrand^ currentBrand! !!TBCarsListComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/25/2023 11:31'!currentBrand: anObjectcurrentBrand := anObject! !!TBCarsListComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 10:02'!renderContentOn: htmlsuper renderContentOn: html.html render: (TBBrandsComponent brands: (self carRental allBrands) carsList: self).self renderErrorMessageIfAnyOn: html.html divstyle: 'display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, min-content)); grid-gap: 20px; padding: 0 20px;';with: [	self readSelectedCars do:	[ :p | html div class: 'car-container'; with: [ html render: (TBCarComponent from: self car: p) ] ]]"renderContentOn: htmlsuper renderContentOn: html.html divstyle: 'display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); grid-gap: 20px; padding: 0 20px;';with: [self carRental totalCars do: [ :p |html render: (TBCarComponent new car: p) ]]"! !!TBCarsListComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 09:59'!readSelectedCars^ self currentBrandifNil: [ self carRental totalCars ]ifNotNil: [ self carRental totalCarsFromBrand: self currentBrand ]! !!TBCarsListComponent methodsFor: 'as yet unclassified' stamp: 'BrunoLazo 4/12/2023 10:02'!showCarDetails: aCarself call: (TBCarDetailsComponent new car: aCar)! !WASession subclass: #TBSession	instanceVariableNames: 'currentUser'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBSession methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 09:26'!resetcurrentUser := nil.self requestContext redirectTo: self application url.self unregister.! !!TBSession methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 09:49'!currentUser^ currentUser! !!TBSession methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 09:49'!currentUser: anObjectcurrentUser := anObject! !!TBSession methodsFor: 'accessing' stamp: 'BrunoLazo 3/30/2023 09:50'!isLogged^ self currentUser notNil! !TBScreenComponent subclass: #TBUserComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBUserComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/30/2023 13:19'!createHeaderComponent^ TBLoginHeaderComponent from: self! !!TBUserComponent methodsFor: 'initialization' stamp: 'BrunoLazo 3/30/2023 13:19'!goToCarListViewself answer! !TBUserComponent subclass: #TBAdminComponent	instanceVariableNames: 'report'	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBAdminComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 14:13'!report: aReportreport := aReport! !!TBAdminComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 14:13'!report^ report! !!TBAdminComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 14:19'!children^ super children copyWith: self report! !!TBAdminComponent methodsFor: 'accessing' stamp: 'BrunoLazo 3/31/2023 14:21'!initializesuper initialize.self report: (TBCarsReport from: self carRental)! !!TBAdminComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 10:04'!renderContentOn: htmlsuper renderContentOn: html.html tbsContainer: [	html heading: 'Blog Admin'.	html horizontalRule.	html render: self report ]! !TBUserComponent subclass: #TBClientComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'LifewareHR1-Components'!!TBClientComponent methodsFor: 'rendering' stamp: 'BrunoLazo 4/12/2023 10:08'!renderContentOn: htmlsuper renderContentOn: html.html tbsContainer: [	html heading: 'Welcome ', self session currentUser login.	html break. 	html paragraph		style: 'font-size: 16px; margin-top: 10px;';		with: 'Budget: €', self session currentUser budget asString.	html break.	html paragraph		style: 'font-size: 16px; margin-top: 10px; margin-bottom: 0px;';		with: 'Rental period history:'.	html orderedList	list: (self session currentUser rented do: [ :each |        html listItem: [ html text: each ]	]).	html horizontalRule ]! !TBApplicationRootComponent initialize!